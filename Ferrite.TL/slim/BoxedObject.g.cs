//  <auto-generated>
//  This file was auto-generated by the Ferrite TL Generator.
//  Please do not modify as all changes will be lost.
//  <auto-generated/>

using System.Buffers;
using System.Runtime.CompilerServices;
using Ferrite.Utils;
using Ferrite.TL.slim.mtproto;

namespace Ferrite.TL.slim;

public readonly unsafe struct BoxedObject : ITLObjectReader, ITLSerializable
{
    private readonly byte* _buff;
    private readonly IMemoryOwner<byte>? _memoryOwner;
    private BoxedObject(Span<byte> buffer, IMemoryOwner<byte> memoryOwner)
    {
        _buff = (byte*)Unsafe.AsPointer(ref buffer[0]);
        Length = buffer.Length;
        _memoryOwner = memoryOwner;
    }
    internal BoxedObject(byte* buffer, in int length, IMemoryOwner<byte> memoryOwner)
    {
        _buff = buffer;
        Length = length;
        _memoryOwner = memoryOwner;
    }
    public int Length { get; }
    public ReadOnlySpan<byte> ToReadOnlySpan() => new (_buff, Length);
    public ref readonly int Constructor => ref *(int*)_buff;
    public static ITLSerializable? Read(Span<byte> data, in int offset, out int bytesRead)
    {
        var ptr = (byte*)Unsafe.AsPointer(ref data[offset..][0]);

        if(*(int*)ptr == unchecked((int)0x05162463))
        {
            return resPQ.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x83c95aec))
        {
            return p_q_inner_data.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x3c6a84d4))
        {
            return p_q_inner_data_temp.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xa9f55f95))
        {
            return p_q_inner_data_dc.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x56fddf88))
        {
            return p_q_inner_data_temp_dc.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xd0e8075c))
        {
            return server_DH_params_ok.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xb5890dba))
        {
            return server_DH_inner_data.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x6643b654))
        {
            return client_DH_inner_data.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x3bcbf734))
        {
            return dh_gen_ok.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x46dc1fb9))
        {
            return dh_gen_retry.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xa69dae02))
        {
            return dh_gen_fail.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x75a3f765))
        {
            return bind_auth_key_inner.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xf35c6d01))
        {
            return rpc_result.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x2144ca19))
        {
            return rpc_error.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x5e2ad36e))
        {
            return rpc_answer_unknown.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xcd78e586))
        {
            return rpc_answer_dropped_running.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xa43ad8b7))
        {
            return rpc_answer_dropped.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x0949d9dc))
        {
            return future_salt.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xae500895))
        {
            return future_salts.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x347773c5))
        {
            return pong.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xe22045fc))
        {
            return destroy_session_ok.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x62d350c9))
        {
            return destroy_session_none.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x9ec20908))
        {
            return new_session_created.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x73f1f8dc))
        {
            return msg_container.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xe06046b2))
        {
            return msg_copy.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x3072cfa1))
        {
            return gzip_packed.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x62d6b459))
        {
            return msgs_ack.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xa7eff811))
        {
            return bad_msg_notification.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xedab447b))
        {
            return bad_server_salt.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x7d861a08))
        {
            return msg_resend_req.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xda69fb52))
        {
            return msgs_state_req.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x04deb57d))
        {
            return msgs_state_info.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x8cc0d131))
        {
            return msgs_all_info.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x276d3ec6))
        {
            return msg_detailed_info.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x809db6df))
        {
            return msg_new_detailed_info.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xf660e1d4))
        {
            return destroy_auth_key_ok.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x0a9f2259))
        {
            return destroy_auth_key_none.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xea109b13))
        {
            return destroy_auth_key_fail.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xbe7e8ef1))
        {
            return req_pq_multi.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xd712e4be))
        {
            return req_DH_params.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xf5045f1f))
        {
            return set_client_DH_params.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x58e4a740))
        {
            return rpc_drop_answer.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xb921bd04))
        {
            return get_future_salts.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x7abe77ec))
        {
            return ping.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xf3427b8c))
        {
            return ping_delay_disconnect.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xe7512126))
        {
            return destroy_session.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x9299359f))
        {
            return http_wait.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xd1435160))
        {
            return destroy_auth_key.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xbc799737))
        {
            return boolFalse.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0x997275b5))
        {
            return boolTrue.Read(data, offset, out bytesRead);
        }
        else if(*(int*)ptr == unchecked((int)0xc4b9f9bb))
        {
            return error.Read(data, offset, out bytesRead);
        }
        bytesRead = 0;
        return null;
    }

    public static unsafe ITLSerializable? Read(byte* buffer, in int length, in int offset, out int bytesRead)
    {

        if(*(int*)buffer == unchecked((int)0x05162463))
        {
            return resPQ.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x83c95aec))
        {
            return p_q_inner_data.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x3c6a84d4))
        {
            return p_q_inner_data_temp.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xa9f55f95))
        {
            return p_q_inner_data_dc.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x56fddf88))
        {
            return p_q_inner_data_temp_dc.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xd0e8075c))
        {
            return server_DH_params_ok.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xb5890dba))
        {
            return server_DH_inner_data.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x6643b654))
        {
            return client_DH_inner_data.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x3bcbf734))
        {
            return dh_gen_ok.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x46dc1fb9))
        {
            return dh_gen_retry.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xa69dae02))
        {
            return dh_gen_fail.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x75a3f765))
        {
            return bind_auth_key_inner.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xf35c6d01))
        {
            return rpc_result.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x2144ca19))
        {
            return rpc_error.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x5e2ad36e))
        {
            return rpc_answer_unknown.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xcd78e586))
        {
            return rpc_answer_dropped_running.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xa43ad8b7))
        {
            return rpc_answer_dropped.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x0949d9dc))
        {
            return future_salt.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xae500895))
        {
            return future_salts.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x347773c5))
        {
            return pong.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xe22045fc))
        {
            return destroy_session_ok.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x62d350c9))
        {
            return destroy_session_none.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x9ec20908))
        {
            return new_session_created.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x73f1f8dc))
        {
            return msg_container.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xe06046b2))
        {
            return msg_copy.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x3072cfa1))
        {
            return gzip_packed.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x62d6b459))
        {
            return msgs_ack.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xa7eff811))
        {
            return bad_msg_notification.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xedab447b))
        {
            return bad_server_salt.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x7d861a08))
        {
            return msg_resend_req.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xda69fb52))
        {
            return msgs_state_req.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x04deb57d))
        {
            return msgs_state_info.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x8cc0d131))
        {
            return msgs_all_info.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x276d3ec6))
        {
            return msg_detailed_info.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x809db6df))
        {
            return msg_new_detailed_info.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xf660e1d4))
        {
            return destroy_auth_key_ok.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x0a9f2259))
        {
            return destroy_auth_key_none.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xea109b13))
        {
            return destroy_auth_key_fail.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xbe7e8ef1))
        {
            return req_pq_multi.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xd712e4be))
        {
            return req_DH_params.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xf5045f1f))
        {
            return set_client_DH_params.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x58e4a740))
        {
            return rpc_drop_answer.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xb921bd04))
        {
            return get_future_salts.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x7abe77ec))
        {
            return ping.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xf3427b8c))
        {
            return ping_delay_disconnect.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xe7512126))
        {
            return destroy_session.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x9299359f))
        {
            return http_wait.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xd1435160))
        {
            return destroy_auth_key.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xbc799737))
        {
            return boolFalse.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0x997275b5))
        {
            return boolTrue.Read(buffer, length, offset, out bytesRead);
        }
        else if(*(int*)buffer == unchecked((int)0xc4b9f9bb))
        {
            return error.Read(buffer, length, offset, out bytesRead);
        }
        bytesRead = 0;
        return null;
    }

    public static int ReadSize(Span<byte> data, in int offset)
    {
        var ptr = (byte*)Unsafe.AsPointer(ref data[offset..][0]);

        if(*(int*)ptr == unchecked((int)0x05162463))
        {
            return resPQ.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x83c95aec))
        {
            return p_q_inner_data.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x3c6a84d4))
        {
            return p_q_inner_data_temp.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xa9f55f95))
        {
            return p_q_inner_data_dc.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x56fddf88))
        {
            return p_q_inner_data_temp_dc.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xd0e8075c))
        {
            return server_DH_params_ok.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xb5890dba))
        {
            return server_DH_inner_data.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x6643b654))
        {
            return client_DH_inner_data.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x3bcbf734))
        {
            return dh_gen_ok.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x46dc1fb9))
        {
            return dh_gen_retry.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xa69dae02))
        {
            return dh_gen_fail.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x75a3f765))
        {
            return bind_auth_key_inner.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xf35c6d01))
        {
            return rpc_result.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x2144ca19))
        {
            return rpc_error.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x5e2ad36e))
        {
            return rpc_answer_unknown.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xcd78e586))
        {
            return rpc_answer_dropped_running.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xa43ad8b7))
        {
            return rpc_answer_dropped.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x0949d9dc))
        {
            return future_salt.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xae500895))
        {
            return future_salts.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x347773c5))
        {
            return pong.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xe22045fc))
        {
            return destroy_session_ok.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x62d350c9))
        {
            return destroy_session_none.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x9ec20908))
        {
            return new_session_created.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x73f1f8dc))
        {
            return msg_container.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xe06046b2))
        {
            return msg_copy.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x3072cfa1))
        {
            return gzip_packed.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x62d6b459))
        {
            return msgs_ack.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xa7eff811))
        {
            return bad_msg_notification.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xedab447b))
        {
            return bad_server_salt.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x7d861a08))
        {
            return msg_resend_req.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xda69fb52))
        {
            return msgs_state_req.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x04deb57d))
        {
            return msgs_state_info.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x8cc0d131))
        {
            return msgs_all_info.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x276d3ec6))
        {
            return msg_detailed_info.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x809db6df))
        {
            return msg_new_detailed_info.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xf660e1d4))
        {
            return destroy_auth_key_ok.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x0a9f2259))
        {
            return destroy_auth_key_none.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xea109b13))
        {
            return destroy_auth_key_fail.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xbe7e8ef1))
        {
            return req_pq_multi.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xd712e4be))
        {
            return req_DH_params.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xf5045f1f))
        {
            return set_client_DH_params.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x58e4a740))
        {
            return rpc_drop_answer.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xb921bd04))
        {
            return get_future_salts.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x7abe77ec))
        {
            return ping.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xf3427b8c))
        {
            return ping_delay_disconnect.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xe7512126))
        {
            return destroy_session.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x9299359f))
        {
            return http_wait.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xd1435160))
        {
            return destroy_auth_key.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xbc799737))
        {
            return boolFalse.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0x997275b5))
        {
            return boolTrue.ReadSize(data, offset);
        }
        else if(*(int*)ptr == unchecked((int)0xc4b9f9bb))
        {
            return error.ReadSize(data, offset);
        }
        return 0;
    }

    public static unsafe int ReadSize(byte* buffer, in int length, in int offset)
    {

        if(*(int*)buffer == unchecked((int)0x05162463))
        {
            return resPQ.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x83c95aec))
        {
            return p_q_inner_data.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x3c6a84d4))
        {
            return p_q_inner_data_temp.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xa9f55f95))
        {
            return p_q_inner_data_dc.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x56fddf88))
        {
            return p_q_inner_data_temp_dc.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xd0e8075c))
        {
            return server_DH_params_ok.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xb5890dba))
        {
            return server_DH_inner_data.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x6643b654))
        {
            return client_DH_inner_data.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x3bcbf734))
        {
            return dh_gen_ok.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x46dc1fb9))
        {
            return dh_gen_retry.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xa69dae02))
        {
            return dh_gen_fail.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x75a3f765))
        {
            return bind_auth_key_inner.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xf35c6d01))
        {
            return rpc_result.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x2144ca19))
        {
            return rpc_error.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x5e2ad36e))
        {
            return rpc_answer_unknown.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xcd78e586))
        {
            return rpc_answer_dropped_running.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xa43ad8b7))
        {
            return rpc_answer_dropped.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x0949d9dc))
        {
            return future_salt.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xae500895))
        {
            return future_salts.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x347773c5))
        {
            return pong.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xe22045fc))
        {
            return destroy_session_ok.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x62d350c9))
        {
            return destroy_session_none.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x9ec20908))
        {
            return new_session_created.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x73f1f8dc))
        {
            return msg_container.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xe06046b2))
        {
            return msg_copy.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x3072cfa1))
        {
            return gzip_packed.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x62d6b459))
        {
            return msgs_ack.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xa7eff811))
        {
            return bad_msg_notification.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xedab447b))
        {
            return bad_server_salt.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x7d861a08))
        {
            return msg_resend_req.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xda69fb52))
        {
            return msgs_state_req.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x04deb57d))
        {
            return msgs_state_info.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x8cc0d131))
        {
            return msgs_all_info.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x276d3ec6))
        {
            return msg_detailed_info.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x809db6df))
        {
            return msg_new_detailed_info.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xf660e1d4))
        {
            return destroy_auth_key_ok.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x0a9f2259))
        {
            return destroy_auth_key_none.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xea109b13))
        {
            return destroy_auth_key_fail.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xbe7e8ef1))
        {
            return req_pq_multi.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xd712e4be))
        {
            return req_DH_params.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xf5045f1f))
        {
            return set_client_DH_params.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x58e4a740))
        {
            return rpc_drop_answer.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xb921bd04))
        {
            return get_future_salts.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x7abe77ec))
        {
            return ping.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xf3427b8c))
        {
            return ping_delay_disconnect.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xe7512126))
        {
            return destroy_session.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x9299359f))
        {
            return http_wait.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xd1435160))
        {
            return destroy_auth_key.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xbc799737))
        {
            return boolFalse.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0x997275b5))
        {
            return boolTrue.ReadSize(buffer, length, offset);
        }
        else if(*(int*)buffer == unchecked((int)0xc4b9f9bb))
        {
            return error.ReadSize(buffer, length, offset);
        }
        return 0;
    }
    public void Dispose()
    {
        _memoryOwner?.Dispose();
    }
}
